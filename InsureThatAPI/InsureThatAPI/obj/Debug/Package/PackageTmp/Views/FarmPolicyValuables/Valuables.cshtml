@model InsureThatAPI.Models.FPValuables
@{
    ViewBag.Title = "Valuables";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 policy-indiv-head">
    <h4><span>FARM PROTECTION POLICY</span> / VALUABLES</h4>
</div>
<div class="col-lg-9 col-md-9 col-sm-9 col-xs-12 endorsmentview">
    <div class="col-lg-12 clearfix col-sm-12 col-xs-12 policy-full-head">
        <h2>VALUABLES</h2>
    </div>
    <div class="clearfix"></div>
    <div id="errorContainer"></div>
@using (Ajax.BeginForm("Valuables", "FarmPolicyValuables", new { cid =@ViewBag.cid }, new AjaxOptions()
{
    HttpMethod = "POST"

}, new { @id = "valuablesFP", @name = "valuablesFP" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(p => p.CustomerId)
    <div class="col-md-12 mb-md-30 mt-10 mb-10">
        <h5>Valuables are covered against accidental loss or damage that takes place during the period of cover:</h5>
        <p>(1) Anywhere in Australia or New Zealand; or </p>
        <p>
            (2) Anywhere in the world for a maximum period of 90 consecutive days starting from the time you leave Australia
        </p>
        <h5 class="mt-10">You can:</h5>
        <p>(A) Specify each valuable with its own Sum Insured; or </p>
        <p>(B) Nominate a total figure as the Sum Insured for all your valuables instead of listing them individually</p>
    </div>
    <div class="clearfix mb-md-30 mt-10 mb-10">
        <div class="col-md-6"><p>Please advise the amount you need to insure your unspecified valuables</p></div>
        <div class="col-md-6">
            @Html.TextBoxFor(p => p.CoverUnspecifiedValuablesObj.CoverUnspecifiedValuables, new { @class = "form-control form-border-bottom", @id = "coverunspecified" })
            @Html.HiddenFor(p => p.CoverUnspecifiedValuablesObj.EiId)
            <p class="mini-text">(We will pay up to $10,000 for any one unspecified item under this section)</p>
        </div>
    </div>
    <div class="col-md-12 mt-10 mb-10">
        <div class="col-md-12 table-8">
            <h5>If you wish to specify any items that are valued greater than $10,000 per item please describe them here</h5>
            <table class="table" style=" width: 100%; ">
                <thead>
                    <tr>
                        <th class="space_left">Description</th>
                        <th class="space_left">Sum Insured</th>
                        <th class="space_right">&nbsp;</th>
                    </tr>
                 </thead>
                <tbody>
                    <tr id="tname-tr-1">
                        <td>
                            @Html.DropDownListFor(Model => Model.SpecifiedItemDescriptionObj.ItemDescription, @Model.SpecifiedItemDescriptionObj.SpecItemDescriptionList, "-- Select --", new { @class = "form-control form-border-bottom description", @id = "description" })
                            @Html.HiddenFor(p => p.SpecifiedItemDescriptionObj.EiId)
                        </td>
                        <td>
                            @Html.TextBoxFor(p => p.SpecifiedItemSumInsuredObj.ItemSumInsured, new { @class = "form-control form-inline field-length-lg no-border sumoftotalcover", @id = "suminsured" })
                            @Html.HiddenFor(p => p.SpecifiedItemSumInsuredObj.EiId)
                        </td>
                        <td class="no-border" id="tname-1"><a href="javascript:void(0)" onclick="tnameAdd(1)" class="button-3d">+</a></td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr>
                        <td class="no-border"><input type="text" name="sum" id="totalsuminsured" class="form-control form-border-bottom" placeholder="Total value"></td>
                        <td class="no-border"><input type="text" name="sum" id="totalcover" class="form-control form-border-bottom" placeholder="Auto calculate"></td>
                    </tr>
                </tfoot>                
            </table>
        </div>
        <div class="clearfix mb-md-30 mt-10 mb-10">
            <p class="col-md-6 col-sm-6 col-xs-12">Excess</p>
            <div class="col-md-3">
                @Html.DropDownListFor(Model => Model.ExcessValuablesObj.Excess, @Model.ExcessValuablesObj.ExcessList,  new { @class = "form-control form-border-bottom description", @id = "excess" })
                @Html.HiddenFor(p => p.ExcessValuablesObj.EiId)
            </div>
            <div class="col-md-3">
                <div class="policy-loc-row"><input type="checkbox" name="ImposedvalObj.Imposed" id="imposed"><label for="checkbox1"><span><span></span></span>Imposed</label></div>
            </div>
        </div>
        <div class="col-md-6 pull-right text-right mt-30">
            <a href="#" class="button-3d nomargin tab-linker quot-prev-btn" rel="1">Prev</a>
            <img src="~/images/button-devider.png">
            <button type="submit" class="button-3d nomargin tab-linker quot-next-btn">Next</button>
        </div>
    </div>
}

</div>
<div class="col-lg-3 col-md-3 col-sm-3 col-xs-12 policy-side-wrap">
    <h3>Policy Sections</h3>
    <div class="well">
        <div class="policy-loc-row">
            <input type="radio" name="location1" id="location1" /><label for="radio1"><span><span></span></span>Home Building Location 1</label>
            <script type="text/javascript">
                $(document).ready(function () {
                    $('#location1').click(function () {
                        $("#policy-ed-del-wrap1").fadeIn('slow');
                        $("#policy-ed-del-wrap2").fadeOut('slow');
                    });
                });
            </script>
            <div id="policy-ed-del-wrap1" class="policy-ed-del-wrapper" style="display: none;">
                <a class="btn color-bk-btn policy-edit-wrap" href="#">Edit</a>&nbsp; <a class="btn color-bk-btn policy-delet-wrap" href="#">Delete</a>
            </div>
        </div>
        <div class="policy-loc-row">
            <input type="radio" name="location1" id="location2" /><label for="radio1"><span><span></span></span>Valuables</label>
            <script type="text/javascript">
                $(document).ready(function () {
                    $('#location2').click(function () {
                        $("#policy-ed-del-wrap2").fadeIn('slow');
                        $("#policy-ed-del-wrap1").fadeOut('slow');
                    });
                });
            </script>
            <div id="policy-ed-del-wrap2" class="policy-ed-del-wrapper" style="display: none;">
                <a class="btn color-bk-btn policy-edit-wrap" href="#">Edit</a>&nbsp; <a class="btn color-bk-btn policy-delet-wrap" href="#">Delete</a>
            </div>
        </div>
        <div class="clearfix"></div>
        <input type="submit" name="newcover" value="New Cover">
    </div>
</div>

<script type="text/javascript">
    $(document).on('keyup', '.sumoftotalcover', function () {
        var sum = 0;
        $(".sumoftotalcover").each(function () {
            sum += +$(this).val();
        });
        $("#totalsuminsured").val(sum);
        $("#totalcover").val(sum);
    });
    function tnameAdd(id) {
        var countId = id + 1;
        var replaceA = '<a href="javascript:void(0)" onclick="tnameRemove(' + id + ')" class="button-3d">-</a>';
        var html = '<tr id="tname-tr-' + countId + '"><td class="no-border">@Html.DropDownListFor(Model => Model.SpecifiedItemDescriptionObj.ItemDescription, Enumerable.Empty<SelectListItem>(), new { @class = "form-control form-border-bottom description", @id = "description" })@Html.HiddenFor(p => p.SpecifiedItemDescriptionObj.EiId)</td><td class="price stotal">@Html.TextBoxFor(p => p.SpecifiedItemSumInsuredObj.ItemSumInsured, new { @class = "form-control form-inline field-length-lg no-border sumoftotalcover", @id = "suminsured" }) @Html.HiddenFor(p => p.SpecifiedItemSumInsuredObj.EiId)</td > <td class="no-border" id="tname-' + countId + '"><a href="javascript:void(0)" onclick="tnameAdd('+countId+')" class="button-3d">+</a></td></tr>';
        $("#tname-" + id).html(replaceA);
        $("#tname-tr-" + id).after(html);
    }
    function tnameRemove(id) {
        $("#tname-tr-" + id).remove();
        var sum = 0;
        $(".sumoftotalcover").each(function () {
            sum += +$(this).val();
        });
        $("#totalsuminsured").text(sum);
        $("#totalcover").val(sum);
    }
</script>
<script type="text/javascript" src="~/Scripts/jquery.validate.js"></script>
<script type="text/javascript" src="~/Scripts/additional-methods.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        $.validator.addMethod("regex", function (value, element, regexp) {
            if (regexp.constructor != RegExp)
                regexp = new RegExp(regexp);
            else if (regexp.global)
                regexp.lastIndex = 0;
            return this.optional(element) || regexp.test(value);
        }, "Please check your input.");
        $("form[name='valuablesFP']").validate({
            errorContainer: "#errorContainer",
            errorLabelContainer: "#errorContainer",
            errorElement: "li",
            rules: {
                "CoverUnspecifiedValuablesObj.CoverUnspecifiedValuables": {
                    regex: /^[0-9]*$/,
                },
                "SpecifiedItemDescriptionObj.ItemDescription": {
                    required: true,
                    regex: /^[a-zA-Z ]*$/,
                },
                "SpecifiedItemSumInsuredObj.ItemSumInsured": {
                    required: true,
                    regex: /^[0-9]*$/,
                },
                "ExcessValuablesObj.Excess": {
                    required: function (el) {
                        if ($("#coverunspecified").val() != '') {
                            return true;
                        }
                    },
                },
            },
            messages: {

                "CoverUnspecifiedValuablesObj.CoverUnspecifiedValuables": {
                    regex: "Special character not allowed"
                },
                "SpecifiedItemDescriptionObj.ItemDescription": {
                    required: "Please enter description",
                    regex: "Special character and Number not allowed"
                },
                "SpecifiedItemSumInsuredObj.ItemSumInsured": {
                    required: "Please enter sum insured",
                    regex: "Only numeric allowed"
                },
                
            },
            onfocusout: function (element) {
                this.element(element);
            },
            submitHandler: function (form) {
                form.submit();
            }
        });
    });
</script>